<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Normal.Realtime.Editor</name>
    </assembly>
    <members>
        <member name="M:Normal.Realtime.RealtimeComponentEditor.IsComponentPlaying(Normal.Realtime.IRealtimeComponent)">
            <summary>
            True if the component is currently in a playing scene. Components on prefab assets are never playing.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeComponentEditor.DrawOwnershipSettings(Normal.Realtime.IRealtimeComponent)">
            <summary>
            Draw the owner of a component and buttons to request or clear ownership.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeComponentEditor.GetComponentOwnerString(Normal.Realtime.IRealtimeComponent)">
            <summary>
            Convert the owner ID of a component into a readable string.
            </summary>
        </member>
        <member name="F:Normal.Realtime.RealtimeViewConfiguration.__loadedSceneViews">
            <summary>
            Loaded views indexed by UUID.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.UpdateCachedViewUUID(Normal.Realtime.RealtimeView,System.String,System.String)">
            <summary>
            Update a view UUID in the cached view UUID map. This needs to be called whenever a loaded view has its UUID
            changed by the editor.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.CleanCachedViewUUIDMap">
            <summary>
            Remove any unloaded (null) RealtimeView references from the view UUID map.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.CacheRootSceneView(Normal.Realtime.RealtimeView)">
            <summary>
            Cache the view in the loaded scene views collection.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.IsViewUUIDConflicting(Normal.Realtime.RealtimeView)">
            <summary>
            True if a view has a conflicting entry in the loaded view UUID map.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.CreateViewUUID">
            <summary>
            Generate a new random RealtimeView UUID.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.IsAssetView(Normal.Realtime.RealtimeView)">
            <summary>
            True if the view is on a prefab asset.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.IsPrefabView(Normal.Realtime.RealtimeView)">
            <summary>
            True if the view is part of a prefab asset or instance.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.IsSceneView(Normal.Realtime.RealtimeView)">
            <summary>
            True if the view is part of a scene view.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.IsRealtimeViewRootPrefabView(Normal.Realtime.RealtimeView)">
            <summary>
            True if the RealtimeView is the root view of a prefab view (asset or instance).
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.IsRealtimeViewRootSceneView(Normal.Realtime.RealtimeView)">
            <summary>
            True if the RealtimeView is the root view of a scene view.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.ConfigureRootSceneView(Normal.Realtime.RealtimeView,Normal.Realtime.Realtime)">
            <summary>
            Configure a RealtimeView that is a root scene view.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.ConfigureRootPrefabView(Normal.Realtime.RealtimeView)">
            <summary>
            Configure a view as a root prefab view.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.ConfigureChildView(Normal.Realtime.RealtimeView)">
            <summary>
            Configure a RealtimeView that is neither a root prefab view nor root scene view.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.ConfigureSceneViews">
            <summary>
            Configure all RealtimeViews in all loaded scenes.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.FindComponentsInScene``1(UnityEngine.SceneManagement.Scene)">
            <summary>
            Return an array of all of the components of a certain type in the scene. The scene must be loaded.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewConfiguration.WarnRealtimeInstanceCount(System.Int32)">
            <summary>
            Warn about too many or too few Realtime instances in a scene.
            </summary>
        </member>
        <member name="P:Normal.Realtime.RealtimeViewEditor.showAdvancedSettings">
            <summary>
            Show advanced view settings. This is static so that all view editors share the same preference.
            </summary>
        </member>
        <member name="P:Normal.Realtime.RealtimeViewEditor.target">
            <summary>
            The editor target as a RealtimeView.
            </summary>
        </member>
        <member name="M:Normal.Realtime.RealtimeViewEditor.ResetViewUUID">
            <summary>
            Reset the view UUID with a confirmation warning.
            </summary>
        </member>
        <member name="M:Normal.NormcoreAppSettingsEditor.FindNormcoreAppKey(UnityEditor.SerializedObject)">
            <summary>
            Find the app key property on a serialized NormcoreAppSettings object.
            </summary>
        </member>
        <member name="M:Normal.NormcoreAppSettingsEditor.FindMatcherURL(UnityEditor.SerializedObject)">
            <summary>
            Get the matcher URL property on a serialized NormcoreAppSettings object.
            </summary>
        </member>
        <member name="M:Normal.NormcoreAppSettingsEditor.IsCustomMatcherURL(System.String)">
            <summary>
            True if the matcher URL value is custom.
            </summary>
        </member>
        <member name="M:Normal.NormcoreAppSettingsEditor.DrawResettableMatcherURLField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
            <summary>
            Draw the matcher URL field with a small reset button next to it.
            </summary>
            <returns>True if the reset button was pressed.</returns>
        </member>
        <member name="T:Normal.NormcoreWarnings">
            <summary>
            A collection of editor warnings that can be disabled by advanced users.
            </summary>
        </member>
        <member name="T:Normal.Internal.DirectoryFinder">
            <summary>
            The DirectoryFinder helps the Normcore UPM package find the Normal folder within the asset database. When
            someone installs Normcore using the unitypackage, one of the assets is a DirectoryFinder in a resource folder.
            Once the UPM package is installed, we use AssetDatabaseUtilities.FindAssetPaths&lt;DirectoryFinder&gt;() to look up
            the Normal installation folder.
            </summary>
        </member>
        <member name="T:Normal.EditorGUIDMigrator">
            <summary>
            In Unity 2023+ only the editor Normcore DLLs are loaded in the editor.
            But we also have runtime DLLs that contain the same scripts, and some assets may be referencing the runtime DLLs.
            Those references should be replaced by their equivalents from the editor DLLs.
            </summary>
        </member>
        <member name="F:Normal.EditorGUIDMigrator.__normcoreRealtimeDLL">
            <summary>
            The editor Normcore.Realtime.dll with the correct GUIDs.
            </summary>
        </member>
        <member name="F:Normal.EditorGUIDMigrator.__normcoreRealtimeEditorDLL">
            <summary>
            The editor Normcore.Realtime.Editor.dll with the correct GUIDs.
            </summary>
        </member>
        <member name="F:Normal.EditorGUIDMigrator.__standaloneDLLMigrations">
            <summary>
            The list of runtime DLLs to be migrated.
            </summary>
        </member>
        <member name="F:Normal.EditorGUIDMigrator.__projectSettingsPath">
            <summary>
            The project settings exist outside of the asset database.
            </summary>
        </member>
        <member name="T:Normal.EditorGUIDMigrator.DLLMigrationEntry">
            <summary>
            Encapsulate a migration of GUIDs for a pair of DLLs.
            </summary>
        </member>
        <member name="T:Normal.EditorGUIDMigrator.GUIDMigrationEntry">
            <summary>
            Encapsulate a GUID migration.
            </summary>
        </member>
        <member name="T:Normal.EditorGUIDMigrator.AssetModification">
            <summary>
            Encapsulate a file modification.
            </summary>
        </member>
        <member name="M:Normal.EditorGUIDMigrator.Migrate">
            <summary>
            Swap DLL references.
            </summary>
        </member>
        <member name="M:Normal.EditorGUIDMigrator.AssetNeedsMigration(System.String)">
            <summary>
            Returns true if the asset data contains any GUIDs that need to be migrated.
            </summary>
        </member>
        <member name="M:Normal.EditorGUIDMigrator.MigrateAsset(System.String,System.Collections.Generic.ICollection{Normal.EditorGUIDMigrator.AssetModification})">
            <summary>
            Migrate a particular asset from. If the asset was migrated, the file
            modifications are not written to disk but are added to the list of modifications.
            </summary>
        </member>
        <member name="M:Normal.EditorGUIDMigrator.GetAssetPaths">
            <summary>
            Gets the paths of all the assets we should try to migrate.
            </summary>
        </member>
        <member name="M:Normal.EditorGUIDMigrator.WriteAssetModification(Normal.EditorGUIDMigrator.AssetModification)">
            <summary>
            Write an asset modification to disk.
            </summary>
        </member>
        <member name="M:Normal.EditorGUIDMigrator.TryMigrateDLLGUIDs(Normal.EditorGUIDMigrator.DLLMigrationEntry,System.String@)">
            <summary>
            Try to replace GUIDs from the specified DLL with the rectified GUIDs, the data
            reference is updated to contain the rectified GUID.
            </summary>
            <returns>True if any GUID was found and replaced in the file data.</returns>
        </member>
        <member name="M:Normal.EditorGUIDMigrator.TryMigrateGUID(Normal.EditorGUIDMigrator.GUIDMigrationEntry,System.String@)">
            <summary>
            Try to replace a file GUID with the rectified GUID. If the GUID is found, the data
            reference is updated to contain the rectified GUID.
            </summary>
            <returns>True if the GUID was found and replaced in the file data.</returns>
        </member>
        <member name="F:Normal.GUIDMigrator.__sourceGUIDToCompiledGUIDMap">
            <summary>
            The map of assets that need to be migrated to the compiled project.
            </summary>
        </member>
        <member name="T:Normal.GUIDMigrator.MigrationEntry">
            <summary>
            Encapsulate a GUID migration.
            </summary>
        </member>
        <member name="T:Normal.GUIDMigrator.AssetModification">
            <summary>
            Encapsulate a file modification.
            </summary>
        </member>
        <member name="M:Normal.GUIDMigrator.Migrate">
            <summary>
            Migrate the asset database from Normcore 1 (source) GUIDs to Normcore 2 (compiled) GUIDs.
            </summary>
        </member>
        <member name="M:Normal.GUIDMigrator.AssetNeedsMigration(System.String)">
            <summary>
            Returns true if the asset data contains any GUIDs that need to be migrated.
            </summary>
        </member>
        <member name="M:Normal.GUIDMigrator.MigrateAsset(System.String,System.Collections.Generic.ICollection{Normal.GUIDMigrator.AssetModification})">
            <summary>
            Migrate a particular asset from source GUIDs to compiled GUIDs. If the asset was migrated, the file
            modifications are not written to disk but are added to the list of modifications.
            </summary>
        </member>
        <member name="M:Normal.GUIDMigrator.WriteAssetModification(Normal.GUIDMigrator.AssetModification)">
            <summary>
            Write an asset modification to disk.
            </summary>
        </member>
        <member name="M:Normal.GUIDMigrator.TryMigrateGUID(Normal.GUIDMigrator.MigrationEntry,System.String@)">
            <summary>
            Try to replace a source file GUID with the rectified compiled GUID. If the source GUID is found, the data
            reference is updated to contain the compiled GUID.
            </summary>
            <returns>True if the source GUID was found and replaced in the file data.</returns>
        </member>
        <member name="M:Normal.PluginMigration.DisplayMigrationDialog(System.String,System.String,System.String)">
            <summary>
            Display a quick popup dialog about Normcore Migration.
            </summary>
        </member>
        <member name="M:Normal.PluginMigration.InferMigrationVersion">
            <summary>
            Try to detect the most recent version of Normcore that was installed in this project.
            </summary>
        </member>
        <member name="M:Normal.PluginMigration.CollectMigrationTasks">
            <summary>
            Query the migration modules and collect a list of migration tasks that we need to perform.
            </summary>
        </member>
        <member name="P:Normal.PluginMigration.isMigrationInProgress">
            <summary>
            True if there is a migration task currently in progress.
            </summary>
        </member>
        <member name="M:Normal.NormcoreEditor.PackagePrefKey(System.String)">
            <summary>
            Namespace an EditorPref key with our package name.
            </summary>
        </member>
        <member name="M:Normal.NormcoreEditor.ProjectPrefKey(System.String)">
            <summary>
            Namespace an EditorPref key with our package name and our custom project GUID.
            </summary>
        </member>
        <member name="M:Normal.NormcoreEditor.OverwriteScriptCompilationPreference">
            <summary>
            Overwrite the script compilation prefs with Recompile After Finished Playing. We don't support
            Recompile And Continue Playing because it could break serialization with another client.
            </summary>
        </member>
        <member name="M:Normal.NormcoreEditor.AddNormcoreScriptingDefine">
            <summary>
            Add NORMCORE to the build target's scripting define symbols if it is missing. We do this so that the
            package installer can be imported into a fresh project. The examples are conditionally compiled so that
            the package installer can run before the package has been added.
            </summary>
        </member>
        <member name="M:Normal.NormcoreEditor.AddNormcoreProjectConfig">
            <summary>
            Create the Normcore project settings (if missing), and the default app settings.
            </summary>
        </member>
        <member name="P:Normal.NormcoreEditorResources.icon">
            <summary>
            The minimal 32x32 Normal icon.
            </summary>
        </member>
        <member name="P:Normal.NormcoreEditorResources.normalLogo">
            <summary>
            The large Normal logo with baked padding.
            </summary>
        </member>
        <member name="P:Normal.NormcoreEditorResources.normcoreLogo">
            <summary>
            The large Normcore logo with baked padding.
            </summary>
        </member>
        <member name="M:Normal.NormcoreEditorResources.GetPackagePath(System.String)">
            <summary>
            Convert a package path to an AssetDatabase path. For example, "Editor/Resources/Image.png" is converted
            to "Packages/com.normalvr.normcore/Editor/Resources/Image.png".
            </summary>
        </member>
        <member name="T:Normal.NormcoreEditorResources.PackageAsset`1">
            <summary>
            A lazily loaded package asset.
            </summary>
        </member>
        <member name="P:Normal.NormcoreEditorResources.PackageAsset`1.resource">
            <summary>
            Get or load the resource.
            </summary>
        </member>
        <member name="P:Normal.PackageVersionCheck.suppressVersionPrompt">
            <summary>
            True if the user has previously chosen to "never ask again" for new versions.
            </summary>
        </member>
        <member name="P:Normal.PackageVersionCheck.lastPromptedVersion">
            <summary>
            The last package version we prompted the user about an update.
            </summary>
        </member>
        <member name="T:Normal.Utility.AssetDatabaseUtilities">
            <summary>
            Utilities related to the AssetDatabase and the Normcore files inside it. This is a conditionally compiled
            class in the runtime assembly so that ScriptableSingletons in the runtime assembly can use it.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.GetNormalPath(System.String)">
            <summary>
            Get the Normal installation directory in the Assets folder. This is distinct from the plugin package and
            is where Normcore project settings should be stored. The path is relative to the project folder.
            </summary>
            <param name="subdir">An optional subdirectory to combine with the Normal directory.</param>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.FindNormalDirectory">
            <summary>
            Find the Normal installation directory in the Assets directory.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.FindAssetGUIDs``1">
            <summary>
            Find assets in the asset database by type, returning a list of asset GUIDs.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.FindAssetPaths``1">
            <summary>
            Find assets in the asset database by type, returning a list of asset paths.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.Exists(System.String)">
            <summary>
            Returns true if an asset exists at a project path.
            </summary>
            <param name="path">A path relative to the project folder.</param>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.AbsoluteProjectPath(System.String)">
            <summary>
            Convert a relative project path (starts with "Assets") into an absolute system path.
            </summary>
            <param name="path">A path relative to the project folder.</param>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.CreateFolderRecursive(System.String)">
            <summary>
            Create all of the folders required for a given project path using AssetDatabase.Create
            </summary>
            <param name="path">A path relative to the project folder.</param>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.CreateMissingAsset``1(System.String,``0@)">
            <summary>
            Create an asset of type T if there are none in the project.
            </summary>
            <param name="path">The path to create the instance.</param>
            <param name="instance">The newly created instance, or null if one wasn't created.</param>
            <typeparam name="T">The ScriptableObject type to instantiate.</typeparam>
            <returns>True if a new instance was created.</returns>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.TryLoadAssetByGUID``1(System.String,``0@)">
            <summary>
            Try to load a specific type of object from the specified GUID.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.TryLoadAssetAtPath``1(System.String,``0@)">
            <summary>
            Try to load a specific type of object from the specified path.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetDatabaseUtilities.TryLoadAssetAnywhere``1(``0@)">
            <summary>
            Try to load a specific type of object from anywhere in the asset database.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetSingleton`1.GetInstance(Normal.Utility.AssetSingleton{`0}.PreferredFilepathDelegate)">
            <summary>
            Load or create the instance if none exists, then return it.
            </summary>
        </member>
        <member name="P:Normal.Utility.AssetSingleton`1.tname">
            <summary>
            The settings type name.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetSingleton`1.LoadInstance">
            <summary>
            Attempt to load an existing instance.
            </summary>
        </member>
        <member name="M:Normal.Utility.AssetSingleton`1.CreateInstance(Normal.Utility.AssetSingleton{`0}.PreferredFilepathDelegate)">
            <summary>
            Attempt to create a new instance.
            </summary>
        </member>
        <member name="P:Normal.Utility.InternalSettings.migration">
            <summary>
            The migration data saved by the project.
            </summary>
        </member>
        <member name="P:Normal.Utility.InternalSettings.projectGUID">
            <summary>
            The Normcore project GUID used to store per-project user settings.
            </summary>
        </member>
        <member name="T:Normal.Utility.MigrationSettings">
            <summary>
            Stores migration data.
            </summary>
        </member>
        <member name="M:Normal.Utility.MigrationSettings.ShouldPromptForMigration(System.Int32)">
            <summary>
            Returns true if the migration prompt should be displayed.
            </summary>
        </member>
        <member name="M:Normal.Utility.MigrationSettings.RegisterPrompt(System.Int32)">
            <summary>
            Called after the migration prompt has been displayed.
            </summary>
        </member>
        <member name="M:Normal.Utility.MigrationSettings.RegisterMigration(System.Int32)">
            <summary>
            Called after all migrations have been applied.
            </summary>
        </member>
        <member name="M:Normal.Utility.MigrationSettings.TryGetUnityVersion(System.Int32@)">
            <summary>
            Because Normcore is a compiled DLL, we can't rely on scripting define symbols.
            So we use this API instead.
            </summary>
        </member>
        <member name="T:Normal.Utility.EditorDLLMigrationStep">
            <summary>
            Stores data for the <see cref="T:Normal.EditorGUIDMigrator"/> migration step.
            </summary>
        </member>
        <member name="F:Normal.Utility.EditorDLLMigrationStep.prompted">
            <summary>
            True if the user has been prompted about this migration step.
            </summary>
        </member>
        <member name="F:Normal.Utility.EditorDLLMigrationStep.migrated">
            <summary>
            True when this step has been applied.
            </summary>
        </member>
        <member name="M:Normal.Utility.EditorDLLMigrationStep.ShouldMigrate">
            <summary>
            Returns true if this migration step should be applied.
            </summary>
        </member>
        <member name="M:Normal.Utility.EditorDLLMigrationStep.RegisterMigration">
            <summary>
            Called after this migration step has been applied.
            </summary>
        </member>
        <member name="M:Normal.Utility.EditorDLLMigrationStep.ShouldPromptForMigration">
            <summary>
            Returns true if the user should be prompted about this migration step.
            </summary>
        </member>
        <member name="M:Normal.Utility.EditorDLLMigrationStep.RegisterPrompt">
            <summary>
            Called after the user has been prompted about this migration step.
            </summary>
        </member>
        <member name="M:Normal.Utility.EditorDLLMigrationStep.IsOnTargetUnityVersion">
            <summary>
            Returns true if the editor is running on a version where this migration is relevant.
            </summary>
        </member>
        <member name="M:Normal.Utility.NormcoreEditorExtensions.HSlice(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a horizontal slice of a Rect with min and max coordinates relative to the Rect.
            </summary>
            <param name="rect">The rect to slice.</param>
            <param name="min">The xMin, relative to the rect.</param>
            <param name="max">The xMax, relative to the rect.</param>
            <returns>A new Rect that is a slice of the original Rect.</returns>
        </member>
        <member name="M:Normal.Utility.NormcoreEditorExtensions.VSlice(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Returns a vertical slice of a Rect with min and max coordinates relative to the Rect.
            </summary>
            <param name="rect">The rect to slice.</param>
            <param name="min">The yMin, relative to the rect.</param>
            <param name="max">The yMax, relative to the rect.</param>
            <returns>A new Rect that is a slice of the original Rect.</returns>
        </member>
        <member name="M:Normal.Utility.NormcoreEditorExtensions.OffsetSingleLine(UnityEngine.Rect,System.Int32,System.Single)">
            <summary>
            Returns a single line inside a Rect.
            </summary>
            <param name="rect"></param>
            <param name="line"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Normal.Utility.NormcoreEditorExtensions.Inset(UnityEngine.Rect,System.Single)">
            <summary>
            Inset a rect from all four sides by a single value.
            </summary>
            <param name="rect">The Rect to inset.</param>
            <param name="value">The inset on all four sides.</param>
            <returns>A new Rect that is inset from the original rect.</returns>
        </member>
        <member name="M:Normal.Utility.NormcoreEditorExtensions.Inset(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Inset a rect from all four sides by vertical and horizontal values.
            </summary>
            <param name="rect">The Rect to inset.</param>
            <param name="vertical">The top and bottom inset.</param>
            <param name="horizontal">The left and right inset.</param>
            <returns>A new Rect that is inset from the original rect.</returns>
        </member>
        <member name="M:Normal.Utility.NormcoreEditorExtensions.Inset(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Inset a rect from all four sides by different values.
            </summary>
            <param name="rect">The Rect to inset.</param>
            <param name="top">The top inset.</param>
            <param name="bottom">The bottom inset.</param>
            <param name="left">The left inset.</param>
            <param name="right">The right inset.</param>
            <returns>A new Rect that is inset from the original rect.</returns>
        </member>
    </members>
</doc>
